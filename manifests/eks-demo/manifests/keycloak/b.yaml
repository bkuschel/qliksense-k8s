apiVersion: v1
data:
  idpHostName: keycloak.devqseok.tk
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  realmName: QSEoK
  staticIpName: keycloak-ip
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: keycloak
    release: qliksense
  name: qliksense-keycloak-configs-cgkdthcff2
  namespace: default
---
apiVersion: v1
data:
  keycloak.sh: |
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset

    exec /opt/jboss/tools/docker-entrypoint.sh -b 0.0.0.0 -Dkeycloak.import=/realm/realm.json -c standalone.xml
kind: ConfigMap
metadata:
  labels:
    app: keycloak
    app.kubernetes.io/instance: qliksense
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 10.0.0
    helm.sh/chart: keycloak-8.1.0
    release: qliksense
  name: qliksense-keycloak-sh
  namespace: default
---
apiVersion: v1
data:
  keycloak.cli: |
    embed-server --std-out=echo
    batch
    ## Sets the node identifier to the node name (= pod name). Node identifiers have to be unique. They can have a
    ## maximum length of 23 characters. Thus, the chart's fullname template truncates its length accordingly.
    /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})


    # Allow log level to be configured via environment variable
    /subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    /subsystem=logging/root-logger=ROOT:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})

    # Add dedicated eventsListener config element to allow configuring elements.
    /subsystem=keycloak-server/spi=eventsListener:add()
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:add(enabled=true)

    # Propagate success events to INFO instead of DEBUG, to expose successful logins for log analysis
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.success-level,value=info)
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.error-level,value=warn)


    # Configure datasource to use explicit query timeout in seconds
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=query-timeout,value=${env.DB_QUERY_TIMEOUT:300})

    # Configure datasource to connection before use
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=validate-on-match,value=${env.DB_VALIDATE_ON_MATCH:true})

    # Configure datasource to try all other connections before failing
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=use-fast-fail,value=${env.DB_USE_CAST_FAIL:false})



    run-batch
    stop-embedded-server
kind: ConfigMap
metadata:
  labels:
    app: keycloak
    app.kubernetes.io/instance: qliksense
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 10.0.0
    helm.sh/chart: keycloak-8.1.0
    release: qliksense
  name: qliksense-keycloak-startup
  namespace: default
---
apiVersion: v1
data:
  realm.json: 
kind: Secret
metadata:
  labels:
    app: keycloak
    release: qliksense
  name: qliksense-keycloak-realm-g7g58gk675
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  clientSecret: eHh4eHg=
  defaultUserPassword: eHh4eHg=
  password: eHh4eHg=
  postgresqlPassword: eHh4eHg=
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: keycloak
    release: qliksense
  name: qliksense-keycloak-secrets-mbg282297b
  namespace: default
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: keycloak
    app.kubernetes.io/instance: qliksense
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 10.0.0
    helm.sh/chart: keycloak-8.1.0
    release: qliksense
    service: headless
  name: qliksense-keycloak-headless
  namespace: default
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    app: keycloak
    app.kubernetes.io/instance: qliksense
    app.kubernetes.io/name: keycloak
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: keycloak
    app.kubernetes.io/instance: qliksense
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 10.0.0
    helm.sh/chart: keycloak-8.1.0
    release: qliksense
    service: http
  name: qliksense-keycloak-http
  namespace: default
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    app: keycloak
    app.kubernetes.io/instance: qliksense
    app.kubernetes.io/name: keycloak
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app: keycloak
    chart: postgresql-8.9.5
    heritage: Helm
    release: qliksense
  name: qliksense-postgresql
  namespace: default
spec:
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: keycloak
    release: qliksense
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: keycloak
    chart: postgresql-8.9.5
    heritage: Helm
    release: qliksense
  name: qliksense-postgresql-headless
  namespace: default
spec:
  clusterIP: None
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: keycloak
    release: qliksense
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: keycloak
    app.kubernetes.io/instance: qliksense
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 10.0.0
    helm.sh/chart: keycloak-8.1.0
    release: qliksense
  name: qliksense-keycloak
  namespace: default
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
      app.kubernetes.io/instance: qliksense
      app.kubernetes.io/name: keycloak
  serviceName: qliksense-keycloak-headless
  template:
    metadata:
      annotations:
        checksum/config-sh: 673eea1dbef81541a61a61aff77e048af27c45da018cdeab79f72155beb6c683
        checksum/config-startup: f727f383d2039b00afc01e66c33b73d6f5fc5f2d9452fa867f2d60e23550cf34
      labels:
        app: keycloak
        app.kubernetes.io/instance: qliksense
        app.kubernetes.io/name: keycloak
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: NotIn
                  values:
                  - test
                matchLabels:
                  app: keycloak
                  app.kubernetes.io/instance: qliksense
                  app.kubernetes.io/name: keycloak
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: role
                operator: NotIn
                values:
                - test
              matchLabels:
                app: keycloak
                app.kubernetes.io/instance: qliksense
                app.kubernetes.io/name: keycloak
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - /scripts/keycloak.sh
        env:
        - name: KEYCLOAK_USER
          value: keycloak
        - name: KEYCLOAK_PASSWORD_FILE
          value: /secrets/password
        - name: JAVA_TOOL_OPTIONS
          value: -XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        - name: DB_VENDOR
          value: postgres
        - name: DB_ADDR
          value: qliksense-postgresql
        - name: DB_PORT
          value: "5432"
        - name: DB_DATABASE
          value: keycloak
        - name: DB_USER
          value: keycloak
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresqlPassword
              name: qliksense-keycloak-secrets-mbg282297b
        image: docker.io/jboss/keycloak:10.0.0
        imagePullPolicy: IfNotPresent
        lifecycle: null
        livenessProbe:
          httpGet:
            path: /auth/
            port: http
          initialDelaySeconds: 300
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /auth/realms/master
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 1
        resources: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /scripts
          name: sh
          readOnly: true
        - mountPath: /secrets
          name: secrets
          readOnly: true
        - mountPath: /opt/jboss/startup-scripts
          name: startup
          readOnly: true
        - mountPath: /realm/
          name: realm
          readOnly: true
        - mountPath: /opt/jboss/keycloak/themes/qliktheme
          name: theme
      initContainers:
      - command:
        - sh
        - -c
        - |
          until printf "." && nc -z -w 2 qliksense-postgresql 5432; do
              sleep 2;
          done;

          echo 'PostgreSQL OK ✓'
        image: busybox:1.31
        imagePullPolicy: IfNotPresent
        name: wait-for-postgresql
        resources: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
      - args:
        - -c
        - |
          echo "Copying theme..."
          cp -R /qliktheme/* /theme
        command:
        - sh
        image: bkuschel/qlik-keycloak-theme:5.1.0
        imagePullPolicy: IfNotPresent
        name: theme-provider
        volumeMounts:
        - mountPath: /theme
          name: theme
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
      serviceAccountName: default
      terminationGracePeriodSeconds: 60
      volumes:
      - configMap:
          defaultMode: 365
          name: qliksense-keycloak-sh
        name: sh
      - name: secrets
        secret:
          secretName: qliksense-keycloak-secrets-mbg282297b
      - configMap:
          defaultMode: 365
          name: qliksense-keycloak-startup
        name: startup
      - name: realm
        secret:
          secretName: qliksense-keycloak-realm-g7g58gk675
      - emptyDir: {}
        name: theme
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations: null
  labels:
    app: keycloak
    chart: postgresql-8.9.5
    heritage: Helm
    release: qliksense
  name: qliksense-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
      release: qliksense
      role: master
  serviceName: qliksense-postgresql-headless
  template:
    metadata:
      labels:
        app: keycloak
        chart: postgresql-8.9.5
        heritage: Helm
        release: qliksense
        role: master
      name: qliksense-postgresql
    spec:
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: /bitnami/postgresql
        - name: PGDATA
          value: /bitnami/postgresql/data
        - name: POSTGRES_USER
          value: keycloak
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresqlPassword
              name: qliksense-keycloak-secrets-mbg282297b
        - name: POSTGRES_DB
          value: keycloak
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
        image: docker.io/bitnami/postgresql:11.7.0-debian-10-r98
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "keycloak" -d "keycloak" -h 127.0.0.1 -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 5432
          name: tcp-postgresql
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "keycloak" -d "keycloak" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /bitnami/postgresql
          name: data
          subPath: null
      securityContext:
        fsGroup: 1001
      volumes:
      - emptyDir:
          medium: Memory
          sizeLimit: 1Gi
        name: dshm
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: keycloak
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: networking.gke.io/v1beta1
kind: ManagedCertificate
metadata:
  labels:
    app: keycloak
    release: qliksense
  name: qliksense-keycloak
  namespace: default
spec:
  domains:
  - keycloak.devqseok.tk
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: gce
    kubernetes.io/ingress.global-static-ip-name: keycloak-ip
    networking.gke.io/managed-certificates: qliksense-keycloak
  labels:
    app: keycloak
    app.kubernetes.io/instance: qliksense
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 10.0.0
    helm.sh/chart: keycloak-8.1.0
    release: qliksense
  name: qliksense-keycloak
  namespace: default
spec:
  rules:
  - host: keycloak.devqseok.tk
    http:
      paths:
      - backend:
          serviceName: qliksense-keycloak-http
          servicePort: http
        path: /*
