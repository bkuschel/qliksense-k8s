---
# Source: keycloak/templates/secret-db.yaml
apiVersion: v1
kind: Secret
metadata:
  name: original-keycloak-db
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "original"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
type: Opaque
data:
  password: ""
  username: "a2V5Y2xvYWs="
---
# Source: keycloak/templates/secret-keycloak.yaml
apiVersion: v1
kind: Secret
metadata:
  name: original-keycloak-http
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "original"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
type: Opaque
data:
  password: "cFZ0WnJCaUowYlFMb3J0dw=="

---
# Source: keycloak/templates/configmap-sh.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: original-keycloak-sh
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "original"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
data:
  keycloak.sh: |
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset

    exec /opt/jboss/tools/docker-entrypoint.sh -b 0.0.0.0  -c standalone.xml

---
# Source: keycloak/templates/configmap-startup.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: original-keycloak-startup
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "original"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
data:
  keycloak.cli: |
    embed-server --std-out=echo
    batch
    ## Sets the node identifier to the node name (= pod name). Node identifiers have to be unique. They can have a
    ## maximum length of 23 characters. Thus, the chart's fullname template truncates its length accordingly.
    /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})
    
    
    # Allow log level to be configured via environment variable
    /subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    /subsystem=logging/root-logger=ROOT:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    
    # Add dedicated eventsListener config element to allow configuring elements.
    /subsystem=keycloak-server/spi=eventsListener:add()
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:add(enabled=true)
    
    # Propagate success events to INFO instead of DEBUG, to expose successful logins for log analysis
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.success-level,value=info)
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.error-level,value=warn)
    
    
    # Configure datasource to use explicit query timeout in seconds
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=query-timeout,value=${env.DB_QUERY_TIMEOUT:300})
    
    # Configure datasource to connection before use
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=validate-on-match,value=${env.DB_VALIDATE_ON_MATCH:true})
    
    # Configure datasource to try all other connections before failing
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=use-fast-fail,value=${env.DB_USE_CAST_FAIL:false})
    
    

    run-batch
    stop-embedded-server
---
# Source: keycloak/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: original-keycloak-headless
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "original"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
    service: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "original"

---
# Source: keycloak/templates/service-http.yaml
apiVersion: v1
kind: Service
metadata:
  name: original-keycloak-http
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "original"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
    service: http
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:eu-west-1:812117193213:certificate/b709fa40-ad89-49f3-ac27-318781fcb99b"

spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: https
      port: 443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "original"

---
# Source: keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: original-keycloak
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "original"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: "original"
  replicas: 1
  serviceName: original-keycloak-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/instance: "original"
      annotations:
        checksum/config-sh: a867de85ee09d4e441e8a5cb8afd383836f996a2e845a32a147066ce172b4e73
        checksum/config-startup: 251a092e0c0ef6e0bf715c4f4e9d12c533100446e535b0be91d26c26bf07a786
    spec:
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        
      containers:
        - name: keycloak
          image: "docker.io/jboss/keycloak:10.0.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            
          command:
            - /scripts/keycloak.sh
          lifecycle:
            # postStart:
            #   exec:
            #     command: ["/bin/sh", "-c", "ls"]
            
          env:
            - name: KEYCLOAK_USER
              value: keycloak
            - name: KEYCLOAK_PASSWORD_FILE
              value: /secrets/password
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            
            - name: DB_VENDOR
              value: "h2"
            # - name: KEYCLOAK_LOGLEVEL
            #   value: DEBUG
            # - name: WILDFLY_LOGLEVEL
            #   value: DEBUG
            # - name: CACHE_OWNERS
            #   value: "2"
            # - name: DB_QUERY_TIMEOUT
            #   value: "60"
            # - name: DB_VALIDATE_ON_MATCH
            #   value: true
            # - name: DB_USE_CAST_FAIL
            #   value: false
            
          volumeMounts:
            - name: sh
              mountPath: /scripts
              readOnly: true
            - name: secrets
              mountPath: /secrets
              readOnly: true
            - name: startup
              mountPath: /opt/jboss/startup-scripts
              readOnly: true
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /auth/
              port: http
            initialDelaySeconds: 300
            timeoutSeconds: 5
            
          readinessProbe:
            httpGet:
              path: /auth/realms/master
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
            
          resources:
            {}
            
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: keycloak
                  app.kubernetes.io/instance: "original"
                matchExpressions:
                  - key: role
                    operator: NotIn
                    values:
                      - test
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: keycloak
                    app.kubernetes.io/instance: "original"
                  matchExpressions:
                    - key: role
                      operator: NotIn
                      values:
                        - test
                topologyKey: failure-domain.beta.kubernetes.io/zone
        
      terminationGracePeriodSeconds: 60
      volumes:
        - name: sh
          configMap:
            name: original-keycloak-sh
            defaultMode: 0555
        - name: secrets
          secret:
            secretName: original-keycloak-http
        - name: startup
          configMap:
            name: original-keycloak-startup
            defaultMode: 0555

---
# Source: keycloak/templates/ingress.yaml

---
# Source: keycloak/templates/poddisruptionbudget.yaml

---
# Source: keycloak/templates/prometheusrules.yaml


---
# Source: keycloak/templates/route.yaml

---
# Source: keycloak/templates/serviceaccount.yaml

---
# Source: keycloak/templates/servicemonitor.yaml



---
# Source: keycloak/templates/test/configmap-test.yaml


---
# Source: keycloak/templates/test/pod-test.yaml


