---
# Source: keycloak/templates/configmap-sh.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mokul-keycloak-sh
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "mokul"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
data:
  keycloak.sh: |
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset

    exec /opt/jboss/tools/docker-entrypoint.sh -b 0.0.0.0 -Dkeycloak.import=/realm/realm.json -c standalone.xml

---
# Source: keycloak/templates/configmap-startup.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mokul-keycloak-startup
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "mokul"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
data:
  keycloak.cli: |
    embed-server --std-out=echo
    batch
    ## Sets the node identifier to the node name (= pod name). Node identifiers have to be unique. They can have a
    ## maximum length of 23 characters. Thus, the chart's fullname template truncates its length accordingly.
    /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})
    
    
    # Allow log level to be configured via environment variable
    /subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    /subsystem=logging/root-logger=ROOT:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    
    # Add dedicated eventsListener config element to allow configuring elements.
    /subsystem=keycloak-server/spi=eventsListener:add()
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:add(enabled=true)
    
    # Propagate success events to INFO instead of DEBUG, to expose successful logins for log analysis
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.success-level,value=info)
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.error-level,value=warn)
    
    
    # Configure datasource to use explicit query timeout in seconds
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=query-timeout,value=${env.DB_QUERY_TIMEOUT:300})
    
    # Configure datasource to connection before use
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=validate-on-match,value=${env.DB_VALIDATE_ON_MATCH:true})
    
    # Configure datasource to try all other connections before failing
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=use-fast-fail,value=${env.DB_USE_CAST_FAIL:false})
    
    

    run-batch
    stop-embedded-server
---
# Source: keycloak/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mokul-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.9.5
    release: "mokul"
    heritage: "Tiller"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "mokul"

---
# Source: keycloak/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mokul-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.5
    release: "mokul"
    heritage: "Tiller"
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "mokul"
    role: master

---
# Source: keycloak/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mokul-keycloak-headless
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "mokul"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
    service: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "mokul"

---
# Source: keycloak/templates/service-http.yaml
apiVersion: v1
kind: Service
metadata:
  name: mokul-keycloak-http
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "mokul"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
    service: http
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "mokul"

---
# Source: keycloak/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: mokul-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.5
    release: "mokul"
    heritage: "Tiller"
  annotations:
spec:
  serviceName: mokul-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "mokul"
      role: master
  template:
    metadata:
      name: mokul-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.9.5
        release: "mokul"
        heritage: "Tiller"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: mokul-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r98
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "keycloak"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-secrets
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "keycloak"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "keycloak" -d "keycloak" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "keycloak" -d "keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        

---
# Source: keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mokul-keycloak
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "mokul"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: "mokul"
  replicas: 1
  serviceName: mokul-keycloak-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/instance: "mokul"
      annotations:
        checksum/config-sh: f642ead710d774b0e675069d4ff7eea4fa9d9633af1b3f09fd72c0bf151cf15c
        checksum/config-startup: 928dd5f3b25d3acd32e5589a3642946f62de4e033be52cdd292751c744a6a6c7
    spec:
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        
      initContainers:
        - name: wait-for-postgresql
          image: "busybox:1.31"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            
          command:
            - sh
            - -c
            - |
              until printf "." && nc -z -w 2 mokul-postgresql 5432; do
                  sleep 2;
              done;

              echo 'PostgreSQL OK âœ“'
          resources:
            {}
            
        - name: theme-provider
          image: bkuschel/qlik-keycloak-theme:5.1.0
          imagePullPolicy: IfNotPresent
          command:
            - sh
          args:
            - -c
            - |
              echo "Copying theme..."
              cp -R /qliktheme/* /theme
          volumeMounts:
            - name: theme
              mountPath: /theme
        
      containers:
        - name: keycloak
          image: "docker.io/jboss/keycloak:10.0.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            
          command:
            - /scripts/keycloak.sh
          lifecycle:
            # postStart:
            #   exec:
            #     command: ["/bin/sh", "-c", "ls"]
            
          env:
            - name: KEYCLOAK_USER
              value: keycloak
            - name: KEYCLOAK_PASSWORD_FILE
              value: /secrets/password
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            
            - name: DB_VENDOR
              value: postgres
            - name: DB_ADDR
              value: mokul-postgresql
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: "keycloak"
            - name: DB_USER
              value: "keycloak"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mokul-postgresql
                  key: postgresql-password
            # - name: KEYCLOAK_LOGLEVEL
            #   value: DEBUG
            # - name: WILDFLY_LOGLEVEL
            #   value: DEBUG
            # - name: CACHE_OWNERS
            #   value: "2"
            # - name: DB_QUERY_TIMEOUT
            #   value: "60"
            # - name: DB_VALIDATE_ON_MATCH
            #   value: true
            # - name: DB_USE_CAST_FAIL
            #   value: false
            
          volumeMounts:
            - name: sh
              mountPath: /scripts
              readOnly: true
            - name: secrets
              mountPath: /secrets
              readOnly: true
            - name: startup
              mountPath: /opt/jboss/startup-scripts
              readOnly: true
            - name: realm
              mountPath: "/realm/"
              readOnly: true
            - name: theme
              mountPath: /opt/jboss/keycloak/themes/qliktheme
            
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /auth/
              port: http
            initialDelaySeconds: 300
            timeoutSeconds: 5
            
          readinessProbe:
            httpGet:
              path: /auth/realms/master
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
            
          resources:
            {}
            
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: keycloak
                  app.kubernetes.io/instance: "mokul"
                matchExpressions:
                  - key: role
                    operator: NotIn
                    values:
                      - test
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: keycloak
                    app.kubernetes.io/instance: "mokul"
                  matchExpressions:
                    - key: role
                      operator: NotIn
                      values:
                        - test
                topologyKey: failure-domain.beta.kubernetes.io/zone
        
      terminationGracePeriodSeconds: 60
      volumes:
        - name: sh
          configMap:
            name: mokul-keycloak-sh
            defaultMode: 0555
        - name: secrets
          secret:
            secretName: keycloak-secrets
        - name: startup
          configMap:
            name: mokul-keycloak-startup
            defaultMode: 0555
        - name: realm
          secret:
              secretName: keycloak-realm
        - name: theme
          emptyDir: {}
        

---
# Source: keycloak/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: mokul-keycloak
  labels:
    helm.sh/chart: keycloak-8.1.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "mokul"
    app.kubernetes.io/version: "10.0.0"
    app.kubernetes.io/managed-by: Tiller
spec:
  rules:
    - host: $(IDP_HOST_NAME)
      http:
        paths:
          - path: /*
            backend:
              serviceName: mokul-keycloak-http
              servicePort: http
---
# Source: keycloak/charts/postgresql/templates/configmap.yaml


---
# Source: keycloak/charts/postgresql/templates/extended-config-configmap.yaml


---
# Source: keycloak/charts/postgresql/templates/initialization-configmap.yaml


---
# Source: keycloak/charts/postgresql/templates/metrics-configmap.yaml


---
# Source: keycloak/charts/postgresql/templates/metrics-svc.yaml


---
# Source: keycloak/charts/postgresql/templates/networkpolicy.yaml


---
# Source: keycloak/charts/postgresql/templates/podsecuritypolicy.yaml


---
# Source: keycloak/charts/postgresql/templates/prometheusrule.yaml


---
# Source: keycloak/charts/postgresql/templates/role.yaml


---
# Source: keycloak/charts/postgresql/templates/rolebinding.yaml


---
# Source: keycloak/charts/postgresql/templates/secrets.yaml

---
# Source: keycloak/charts/postgresql/templates/serviceaccount.yaml


---
# Source: keycloak/charts/postgresql/templates/servicemonitor.yaml


---
# Source: keycloak/charts/postgresql/templates/statefulset-slaves.yaml


---
# Source: keycloak/charts/postgresql/templates/svc-read.yaml


---
# Source: keycloak/templates/poddisruptionbudget.yaml

---
# Source: keycloak/templates/prometheusrules.yaml


---
# Source: keycloak/templates/route.yaml

---
# Source: keycloak/templates/secret-db.yaml

---
# Source: keycloak/templates/secret-keycloak.yaml


---
# Source: keycloak/templates/serviceaccount.yaml

---
# Source: keycloak/templates/servicemonitor.yaml



---
# Source: keycloak/templates/test/configmap-test.yaml


---
# Source: keycloak/templates/test/pod-test.yaml


